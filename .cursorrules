# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, component name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:



The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

Example usages:
- Generate a React Native component for a simple button.
- Convert a design mockup to React Native code.
- Explain how to use a specific library in React Native (e.g., React Navigation).
- Suggest solutions for performance issues in React Native.

## Search engine

You could use the `tools/search_engine.py` file to search the web.



## React Native Debugger

Use React Native Debugger to debug your React Native application.  It allows you to inspect elements, network requests, and Redux state.

## Flipper

Flipper is a platform for debugging mobile apps. Use it to inspect layouts, network requests, and logs in React Native.

## Native Development Tools (Android Studio/Xcode)

Use Android Studio (for Android) and Xcode (for iOS) to diagnose platform-specific issues and performance problems.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- **Lesson:  Performance issues with large lists in FlatList can be improved by using `getItemLayout` to help React Native skip measurement of the list items.**
- **Lesson:  Be careful of Android and iOS compatibility with styling. Use `Platform.OS` to switch between styles when necessary.**
- **Lesson: Ensure fontFamily values match the defined values in theme/fonts.js to avoid parsing errors**
- **Lesson: Use react-native-paper's Icon component for consistent star ratings across platforms**
- **Lesson: Use color prop in Icon component to customize star ratings appearance**
- **Lesson: Use SVG for high-quality, customizable star ratings in React Native**
- **Lesson: Ensure correct relative paths when importing components to avoid bundling errors**

# Scratchpad